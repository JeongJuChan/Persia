//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Input/CrossPlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CrossPlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CrossPlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CrossPlayerInput"",
    ""maps"": [
        {
            ""name"": ""MainPlayMap"",
            ""id"": ""732a54bb-c2a4-476d-890f-ad02efd0edad"",
            ""actions"": [
                {
                    ""name"": ""Skill1"",
                    ""type"": ""Value"",
                    ""id"": ""cc91e973-20a8-4c54-8f14-e42cc576991b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Skill2"",
                    ""type"": ""Value"",
                    ""id"": ""1917166e-6705-48d4-bb55-f7727bc6558e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""c415b07e-a996-4e59-85c8-8e39dd1df63e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5a963d16-bd5d-4c90-a587-c341c97371f2"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Skill1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9739daa2-5572-444d-8e5c-b7cb7f4f5f58"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Skill2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""faf3ebec-b745-42fe-a9f3-a8baf06c53fe"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MainPlayMap
        m_MainPlayMap = asset.FindActionMap("MainPlayMap", throwIfNotFound: true);
        m_MainPlayMap_Skill1 = m_MainPlayMap.FindAction("Skill1", throwIfNotFound: true);
        m_MainPlayMap_Skill2 = m_MainPlayMap.FindAction("Skill2", throwIfNotFound: true);
        m_MainPlayMap_LeftClick = m_MainPlayMap.FindAction("LeftClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainPlayMap
    private readonly InputActionMap m_MainPlayMap;
    private List<IMainPlayMapActions> m_MainPlayMapActionsCallbackInterfaces = new List<IMainPlayMapActions>();
    private readonly InputAction m_MainPlayMap_Skill1;
    private readonly InputAction m_MainPlayMap_Skill2;
    private readonly InputAction m_MainPlayMap_LeftClick;
    public struct MainPlayMapActions
    {
        private @CrossPlayerInput m_Wrapper;
        public MainPlayMapActions(@CrossPlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Skill1 => m_Wrapper.m_MainPlayMap_Skill1;
        public InputAction @Skill2 => m_Wrapper.m_MainPlayMap_Skill2;
        public InputAction @LeftClick => m_Wrapper.m_MainPlayMap_LeftClick;
        public InputActionMap Get() { return m_Wrapper.m_MainPlayMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainPlayMapActions set) { return set.Get(); }
        public void AddCallbacks(IMainPlayMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MainPlayMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainPlayMapActionsCallbackInterfaces.Add(instance);
            @Skill1.started += instance.OnSkill1;
            @Skill1.performed += instance.OnSkill1;
            @Skill1.canceled += instance.OnSkill1;
            @Skill2.started += instance.OnSkill2;
            @Skill2.performed += instance.OnSkill2;
            @Skill2.canceled += instance.OnSkill2;
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
        }

        private void UnregisterCallbacks(IMainPlayMapActions instance)
        {
            @Skill1.started -= instance.OnSkill1;
            @Skill1.performed -= instance.OnSkill1;
            @Skill1.canceled -= instance.OnSkill1;
            @Skill2.started -= instance.OnSkill2;
            @Skill2.performed -= instance.OnSkill2;
            @Skill2.canceled -= instance.OnSkill2;
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
        }

        public void RemoveCallbacks(IMainPlayMapActions instance)
        {
            if (m_Wrapper.m_MainPlayMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainPlayMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MainPlayMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainPlayMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainPlayMapActions @MainPlayMap => new MainPlayMapActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IMainPlayMapActions
    {
        void OnSkill1(InputAction.CallbackContext context);
        void OnSkill2(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
    }
}
